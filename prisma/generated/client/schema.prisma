generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  email             String            @unique
  name              String?
  password          String
  workInterval      Int?              @default(50) @map("work_interval")
  breakInterval     Int?              @default(10) @map("break_interval")
  intervalCount     Int?              @default(7) @map("intervals_count")
  PomodoroRound     PomodoroRound[]
  promodorosessions PomodoroSession[]
  tasks             Task[]
  timeblocks        TimeBlock[]

  @@map("user")
}

model Task {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])

  @@map("task1")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  color     String?
  duration  Int
  order     Int      @default(1)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("time_block")
}

model PomodoroSession {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  isCompleted Boolean?        @default(false) @map("is_completed")
  userId      String          @map("user_id")
  rounds      PomodoroRound[]
  user        User            @relation(fields: [userId], references: [id])

  @@map("pomodoro_session")
}

model PomodoroRound {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  totalSeconds      Int             @map("total_seconds")
  isComplete        Boolean?        @default(false) @map("is_complete")
  PomodoroSessionId String          @map("pomodoro_session_id")
  userId            String?
  PomodoroSession   PomodoroSession @relation(fields: [PomodoroSessionId], references: [id], onDelete: Cascade)
  User              User?           @relation(fields: [userId], references: [id])

  @@map("pomodoro_round")
}

enum Priority {
  low
  medium
  high
}
